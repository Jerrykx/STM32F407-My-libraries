#include "stm32f4xx.h"
#include "stm32f4_discovery.h"

int x = 0;

void EXTI0_IRQHandler(void)
{
	if(EXTI_GetITStatus(EXTI_Line0) != RESET)
	{
	   // miejsce na kod wywo�ywany w momencie wyst�pienia przerwania
		if(x) {
			GPIO_ResetBits(GPIOD, GPIO_Pin_14);
			GPIO_SetBits(GPIOD, GPIO_Pin_12);
			x = 0;
		} else {
			GPIO_ResetBits(GPIOD, GPIO_Pin_12);
			GPIO_SetBits(GPIOD, GPIO_Pin_14);
			x = 1;
		}

		// wyzerowanie flagi wyzwolonego przerwania
		EXTI_ClearITPendingBit(EXTI_Line0);
	}
}



int main(void)
{
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);

	//PINY DLA LED
	GPIO_InitTypeDef  led;
	led.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_14;
	led.GPIO_Mode = GPIO_Mode_OUT;
	led.GPIO_OType = GPIO_OType_PP;
	led.GPIO_Speed = GPIO_Speed_100MHz;
	led.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOD, &led);

	GPIO_InitTypeDef  button;
	button.GPIO_Pin = GPIO_Pin_0;
	button.GPIO_Mode = GPIO_Mode_IN;
	button.GPIO_OType = GPIO_OType_PP;
	button.GPIO_Speed = GPIO_Speed_100MHz;
	button.GPIO_PuPd = GPIO_PuPd_DOWN;
	GPIO_Init(GPIOA, &button);

	// INFO *******************************************
	// przy innych przyciskach (pinach) zmienic x: EXTI_Linex oraz EXTIx_IRQn (w przerwaniu)
	// numer po Line to numer pinu np. PB2 to Line2, w przerwaniu tak samo
	// zmienic tez przypisanie pinu EXTI_PortSourceGPIOA, EXTI_PinSource0 poni�ej
	// *************************************************

	EXTI_InitTypeDef EXTI_InitStructure;
	// wyb�r numeru aktualnie konfigurowanej linii przerwa�
	EXTI_InitStructure.EXTI_Line = EXTI_Line0;
	// wyb�r trybu - przerwanie b�d� zdarzenie
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
	// wyb�r zbocza, na kt�re zareaguje przerwanie
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
	// uruchom dan� lini� przerwa�
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
	// zapisz struktur� konfiguracyjn� przerwa� zewn�trznych do rejestr�w
	EXTI_Init(&EXTI_InitStructure);

	// pod��czenie danego pinu portu do kontrolera przerwa�.
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0); // PA0

	NVIC_InitTypeDef NVIC_InitStructure;
	// numer przerwania
	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
	// priorytet g��wny
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;
	// subpriorytet
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x00;
	// uruchom dany kana�
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	// zapisz wype�nion� struktur� do rejestr�w
	NVIC_Init(&NVIC_InitStructure);

	GPIO_ResetBits(GPIOD, GPIO_Pin_12 | GPIO_Pin_14);

	for(;;){
	}
}
