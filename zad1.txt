/** ***********************************************************
  * @file    main.c
  * @author  Ac6
  * @version V1.0
  * @date    01-December-2013
  * @brief   Default main function.
  ******************************************************************************
*/


#include "stm32f4xx.h"
#include "stm32f4xx_tim.h"
#include "stm32f4xx_conf.h"
#include "stm32f4xx_dac.h"
#include "stm32f4xx_rcc.h"
#include "stm32f4xx_exti.h"
#include "stm32f4xx_adc.h"
#include "stm32f4xx_syscfg.h"
#include "stm32f4_discovery.h"


int a,b,f,g=0;

void configGPIOE()
{
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);

	GPIO_InitTypeDef  GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 |GPIO_Pin_10;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOE, &GPIO_InitStructure);
	GPIO_SetBits(GPIOE, GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 |GPIO_Pin_10);

	GPIO_SetBits(GPIOE, GPIO_InitStructure.GPIO_Pin);


	GPIO_InitTypeDef  GPIO_key;

	GPIO_key.GPIO_Pin = GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 |GPIO_Pin_14;
	GPIO_key.GPIO_Mode = GPIO_Mode_IN;
	GPIO_key.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_key.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_Init(GPIOE, &GPIO_key);
	GPIO_SetBits(GPIOE, GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 |GPIO_Pin_14);





    // NVIC Dla TIM4 obs�uguj�cego miganie

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
	NVIC_InitTypeDef nvic;
	nvic.NVIC_IRQChannel = TIM4_IRQn;						// priorytet główny
	nvic.NVIC_IRQChannelPreemptionPriority = 0x00;			// numer przerwania
	nvic.NVIC_IRQChannelSubPriority = 0x00;					// subpriorytet
	nvic.NVIC_IRQChannelCmd = ENABLE;						// uruchom dany kanał
	NVIC_Init(&nvic);


	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);	// 84MHz = 84000000Hz
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	TIM_TimeBaseStructure.TIM_Period = 8399;
	TIM_TimeBaseStructure.TIM_Prescaler = 2499;
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);


	TIM_Cmd(TIM4, ENABLE);

    TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);






}

int main(void)
{
	configGPIOE();



		for(;;)
		{
			if(!GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_11))
			{
				if(a==1){
					a=0;
				}
				else{
					a=1;
				}

			}
			if(!GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_12))
			{
				if(b==1)
				{
					b=0;
				}
				else
				{
					b=1;
				}
			}
			if(!GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_13))
			{
				if(f==1)
				{
					f=0;
				}
				else
				{
					f=1;
				}
			}
			if(!GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_14))
			{
				if(g==1)
				{
					g=0;
				}
				else
				{
					g=1;
				}
			}
		}
}

void  TIM4_IRQHandler(void){
	if(TIM_GetFlagStatus(TIM4, TIM_FLAG_Update)) {

		if(a==1) {
			GPIO_ToggleBits(GPIOE, GPIO_Pin_7);
		}
		else {
			GPIO_SetBits(GPIOE, GPIO_Pin_7);
		}

		if(b==1) {
			GPIO_ToggleBits(GPIOE, GPIO_Pin_8);
		}
		else {
			GPIO_SetBits(GPIOE, GPIO_Pin_8);
		}

		if(f==1) {
			GPIO_ToggleBits(GPIOE, GPIO_Pin_9);
		}
		else {
			GPIO_SetBits(GPIOE, GPIO_Pin_9);
		}

		if(g==1) {
			GPIO_ToggleBits(GPIOE, GPIO_Pin_10);
		}
		else {
			GPIO_SetBits(GPIOE, GPIO_Pin_10);
		}

		TIM_ClearFlag(TIM4, TIM_FLAG_Update);
	}
}
