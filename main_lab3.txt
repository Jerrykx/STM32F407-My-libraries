#include "stdlib.h"
#include "stm32f4xx.h"
#include "stm32f4xx_conf.h"
#include "stm32f4xx_rcc.h"
#include "stm32f4xx_gpio.h"
#include "stm32f4_discovery.h"
#include "stm32f4xx_tim.h"
#include "display_8x4.h"
#include "mylib.h"

//unsigned int counter = TIM4->CNT;

// Timery 	TIM1, TIM8, TIM9, TIM10 i TIM11
// wynosi ona ftim = fcpu = 168 MHz (szyna APB2)
// W przypadku timerów
// TIM2, TIM5, TIM3, TIM4, TIM12,
// TIM13, TIM14, TIM6 i TIM7
// maksymalna częstotliwość ustalona jest
// na ftim = fcpu/2 = 84 MHz (szyna APB1).

// Konfiguracja timera - kolejne pola oznaczają odpowiednio:
 // TIM_Period - okres zliczania
 // TIM_Prescaler - wartość prescalera
 // TIM_ClockDivision - opcjonalny parametr, wpisujemy wartość domyślną TIM_CKD_DIV1
 // TIM_CounterMode - kierunek zliczania (góra/dół), wyrażany odpowiednio

GPIO_InitTypeDef  GPIO_LED;
GPIO_InitTypeDef  DISPLAY_LED;
unsigned int counter = 0;


static __IO uint32_t TimingDelay = 0;

void Delay(uint32_t time){
	TimingDelay = time;
	while(TimingDelay!=0);
}

void SysTick_Handler(void){
	if(TimingDelay!=0x00)
		TimingDelay--;
}

int main(void)
{
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE); //84MHz = 84000000Hz
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	TIM_TimeBaseStructure.TIM_Period = 9999;
	TIM_TimeBaseStructure.TIM_Prescaler = 8399;
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);

	TIM_Cmd(TIM4, ENABLE);

	SysTick_Config(SystemCoreClock / 10000);

    // GPIOD Periph clock enable
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);

    // Configure PD12, PD13, PD14 and PD15 in output pushpull mode
    GPIO_LED.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13| GPIO_Pin_14| GPIO_Pin_15;
    GPIO_LED.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_LED.GPIO_OType = GPIO_OType_PP;
    GPIO_LED.GPIO_Speed = GPIO_Speed_100MHz;
    GPIO_LED.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_Init(GPIOD, &GPIO_LED);


    // Configure PD12, PD13, PD14 and PD15 in output pushpull mode
    DISPLAY_LED.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1| GPIO_Pin_2|GPIO_Pin_3| GPIO_Pin_4;
    DISPLAY_LED.GPIO_Mode = GPIO_Mode_OUT;
    DISPLAY_LED.GPIO_OType = GPIO_OType_PP;
    DISPLAY_LED.GPIO_Speed = GPIO_Speed_100MHz;
    DISPLAY_LED.GPIO_PuPd = GPIO_PuPd_DOWN;
    GPIO_Init(GPIOA, &DISPLAY_LED);

    GPIO_SetBits(GPIOA, GPIO_Pin_1);
    GPIO_ResetBits(GPIOA, GPIO_PinSource0);




    for(;;)
    {
    	/*counter = TIM4->CCR1;

    	if(TIM_GetFlagStatus(TIM4, TIM_FLAG_Update)) {
    	 GPIO_ToggleBits(GPIOA,GPIO_Pin_1);
         GPIO_ToggleBits(GPIOD,GPIO_LED.GPIO_Pin);
         TIM_ClearFlag(TIM4, TIM_FLAG_Update);
  	    }*/


    	//if(counter)
    	//{
        //    GPIO_ToggleBits(GPIOD,GPIO_LED.GPIO_Pin);
    	//}
    	zad3();

    }
}

void InitializeTimer(int prescaler,int period)
{
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
    TIM_TimeBaseInitTypeDef timerInitStructure;
    timerInitStructure.TIM_Prescaler = prescaler;
    timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
    timerInitStructure.TIM_Period = period;
    timerInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
    timerInitStructure.TIM_RepetitionCounter = 0;
    TIM_TimeBaseInit(TIM4, &timerInitStructure);
    TIM_Cmd(TIM4, ENABLE);
}

void InitializePWMChannel()
{
    TIM_OCInitTypeDef outputChannelInit = {0,};
    outputChannelInit.TIM_OCMode = TIM_OCMode_PWM1;
    outputChannelInit.TIM_Pulse = 1999;
    outputChannelInit.TIM_OutputState = TIM_OutputState_Enable;
    outputChannelInit.TIM_OCPolarity = TIM_OCPolarity_High;

    TIM_OC1Init(TIM4, &outputChannelInit);
    TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);

    GPIO_PinAFConfig(GPIOD, GPIO_PinSource12, GPIO_AF_TIM4);
}

void InitializeRedLedForPWMChannel()
{
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);

    GPIO_InitTypeDef gpioStructure;
    gpioStructure.GPIO_Pin = GPIO_Pin_12;
    gpioStructure.GPIO_Mode = GPIO_Mode_AF;
    gpioStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOD, &gpioStructure);
}

void zad3(){
	int prescaler=9999;
	int period=8399;
	InitializeTimer(prescaler, period);
	InitializeRedLedForPWMChannel();
	InitializePWMChannel();
	//STM32F40_41xxx wywaliłem to sprawdzić czy działa reszta
}


void zad4()
{
	TIM_OCInitTypeDef TIM_OCInitStructure;
	/* PWM1 Mode configuration: */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = 0;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	TIM_OCxInit(TIM4, &TIM_OCInitStructure);
	TIM_OCxPreloadConfig(TIM4, TIM_OCPreload_Enable);
	// Przypisanie gpio

	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource12, GPIO_AF_TIM4);
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_Init(GPIOD, &GPIO_InitStructure);

	//Wykaz możliwych połączeń pinów portów GPIO z peryferiami (tryb Alternate Function) znajduje się w sekcji Pinouts and Pin Description, w nocie katalogowej właściwej dla stosowanego mikrokontrolera.

	// WZÓR CCR = duty/100 * (period +1)
	// należy wartość wpisać do timera TIMx->CCRx = duty/100 * (period +1)

}

